
configurable POSIX file locking API


 fs/Kconfig          |    2 	1 +	1 -	0 !
 fs/Makefile         |    3 	2 +	1 -	0 !
 fs/proc/proc_misc.c |    4 	4 +	0 -	0 !
 include/linux/fs.h  |   43 	42 +	1 -	0 !
 init/Kconfig        |    6 	6 +	0 -	0 !
 kernel/sys_ni.c     |    1 	1 +	0 -	0 !
 kernel/sysctl.c     |    5 	5 +	0 -	0 !
 7 files changed, 61 insertions(+), 3 deletions(-)

Index: linux-2.6.22.5/fs/Kconfig
===================================================================
--- linux-2.6.22.5.orig/fs/Kconfig
+++ linux-2.6.22.5/fs/Kconfig
@@ -1525,7 +1525,7 @@ menu "Network File Systems"
 
 config NFS_FS
 	tristate "NFS file system support"
-	depends on INET
+	depends on INET && FILE_LOCKING
 	select LOCKD
 	select SUNRPC
 	select NFS_ACL_SUPPORT if NFS_V3_ACL
Index: linux-2.6.22.5/fs/Makefile
===================================================================
--- linux-2.6.22.5.orig/fs/Makefile
+++ linux-2.6.22.5/fs/Makefile
@@ -7,7 +7,7 @@
 
 obj-y :=	open.o read_write.o file_table.o super.o \
 		char_dev.o stat.o exec.o pipe.o namei.o fcntl.o \
-		ioctl.o readdir.o select.o fifo.o locks.o dcache.o inode.o \
+		ioctl.o readdir.o select.o fifo.o dcache.o inode.o \
 		attr.o bad_inode.o file.o filesystems.o namespace.o aio.o \
 		seq_file.o libfs.o fs-writeback.o \
 		pnode.o drop_caches.o splice.o sync.o utimes.o \
@@ -21,6 +21,7 @@ endif
 
 obj-$(CONFIG_INOTIFY)		+= inotify.o
 obj-$(CONFIG_INOTIFY_USER)	+= inotify_user.o
+obj-$(CONFIG_FILE_LOCKING)	+= locks.o
 obj-$(CONFIG_XATTR)		+= xattr.o
 obj-$(CONFIG_EPOLL)		+= eventpoll.o
 obj-$(CONFIG_ANON_INODES)	+= anon_inodes.o
Index: linux-2.6.22.5/fs/proc/proc_misc.c
===================================================================
--- linux-2.6.22.5.orig/fs/proc/proc_misc.c
+++ linux-2.6.22.5/fs/proc/proc_misc.c
@@ -624,6 +624,7 @@ static int cmdline_read_proc(char *page,
 	return proc_calc_metrics(page, start, off, count, eof, len);
 }
 
+#ifdef CONFIG_FILE_LOCKING
 static int locks_read_proc(char *page, char **start, off_t off,
 				 int count, int *eof, void *data)
 {
@@ -633,6 +634,7 @@ static int locks_read_proc(char *page, c
 		*eof = 1;
 	return len;
 }
+#endif
 
 static int execdomains_read_proc(char *page, char **start, off_t off,
 				 int count, int *eof, void *data)
@@ -691,7 +693,9 @@ void __init proc_misc_init(void)
 #endif
 		{"filesystems",	filesystems_read_proc},
 		{"cmdline",	cmdline_read_proc},
+#ifdef CONFIG_FILE_LOCKING
 		{"locks",	locks_read_proc},
+#endif
 		{"execdomains",	execdomains_read_proc},
 		{NULL,}
 	};
Index: linux-2.6.22.5/include/linux/fs.h
===================================================================
--- linux-2.6.22.5.orig/include/linux/fs.h
+++ linux-2.6.22.5/include/linux/fs.h
@@ -832,6 +832,9 @@ struct file_lock {
 
 #include <linux/fcntl.h>
 
+extern void send_sigio(struct fown_struct *fown, int fd, int band);
+
+#ifdef CONFIG_FILE_LOCKING
 extern int fcntl_getlk(struct file *, struct flock __user *);
 extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
 			struct flock __user *);
@@ -842,7 +845,6 @@ extern int fcntl_setlk64(unsigned int, s
 			struct flock64 __user *);
 #endif
 
-extern void send_sigio(struct fown_struct *fown, int fd, int band);
 extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
 extern int fcntl_getlease(struct file *filp);
 
@@ -870,6 +872,32 @@ extern int lease_modify(struct file_lock
 extern int lock_may_read(struct inode *, loff_t start, unsigned long count);
 extern int lock_may_write(struct inode *, loff_t start, unsigned long count);
 
+#else /* !CONFIG_FILE_LOCKING */
+#define fcntl_getlk(a, b) (-EINVAL)
+#define fcntl_setlk(a, b, c, d) (-EACCES)
+#if BITS_PER_LONG == 32
+#define fcntl_getlk64(a, b) (-EINVAL)
+#define fcntl_setlk64(a, b, c, d) (-EACCES)
+#endif
+#define fcntl_setlease(a, b, c) (0)
+#define fcntl_getlease(a) (0)
+#define locks_init_lock(a)
+#define locks_copy_lock(a, b)
+#define locks_remove_posix(a, b)
+#define locks_remove_flock(a)
+#define posix_test_lock(a, b) (0)
+#define posix_lock_file(a, b) (-ENOLCK)
+#define posix_lock_file_wait(a, b) (-ENOLCK)
+#define posix_block_lock(a, b)
+#define posix_unblock_lock(a, b)
+#define posix_locks_deadlock(a, b) (0)
+#define __break_lease(a, b) (0)
+#define lease_get_mtime(a, b)
+#define lock_may_read(a, b, c) (1)
+#define lock_may_write(a, b, c) (1)
+#define steal_locks(a)
+#endif /* !CONFIG_FILE_LOCKING */
+
 struct fasync_struct {
 	int	magic;
 	int	fa_fd;
@@ -1456,6 +1484,7 @@ extern struct kset fs_subsys;
 #define FLOCK_VERIFY_READ  1
 #define FLOCK_VERIFY_WRITE 2
 
+#ifdef CONFIG_FILE_LOCKING
 extern int locks_mandatory_locked(struct inode *);
 extern int locks_mandatory_area(int, struct inode *, struct file *, loff_t, size_t);
 
@@ -1496,6 +1525,18 @@ static inline int break_lease(struct ino
 	return 0;
 }
 
+#else /* !CONFIG_FILE_LOCKING */
+
+#define locks_mandatory_locked(a) (0)
+#define locks_mandatory_area(a, b, c, d, e) (0)
+#define MANDATORY_LOCK(inode) (0)
+#define locks_verify_locked(a) (0)
+#define locks_verify_area(a, b, c, d, e) (0 && (b))
+#define locks_verify_truncate(a, b, c) (0)
+#define break_lease(a, b) (0)
+
+#endif /* !CONFIG_FILE_LOCKING */
+
 /* fs/open.c */
 
 extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
Index: linux-2.6.22.5/init/Kconfig
===================================================================
--- linux-2.6.22.5.orig/init/Kconfig
+++ linux-2.6.22.5/init/Kconfig
@@ -367,6 +367,12 @@ config XATTR
 	help
 	  This enables the filesystem extended attribute syscalls.
 
+config FILE_LOCKING
+	default y
+	bool "Enable POSIX file locking API" if EMBEDDED
+	help
+	  This enables standard file locking support.
+
 config MEASURE_INLINES
 	default n
 	bool "Enable inline measurement" if EMBEDDED
Index: linux-2.6.22.5/kernel/sys_ni.c
===================================================================
--- linux-2.6.22.5.orig/kernel/sys_ni.c
+++ linux-2.6.22.5/kernel/sys_ni.c
@@ -129,6 +129,7 @@ cond_syscall(sys_flistxattr);
 cond_syscall(sys_removexattr);
 cond_syscall(sys_lremovexattr);
 cond_syscall(sys_fremovexattr);
+cond_syscall(sys_flock);
 
 /* arch-specific weak syscall entries */
 cond_syscall(sys_pciconfig_read);
Index: linux-2.6.22.5/kernel/sysctl.c
===================================================================
--- linux-2.6.22.5.orig/kernel/sysctl.c
+++ linux-2.6.22.5/kernel/sysctl.c
@@ -954,6 +954,7 @@ static ctl_table fs_table[] = {
 		.extra1		= &minolduid,
 		.extra2		= &maxolduid,
 	},
+#ifdef CONFIG_FILE_LOCKING
 	{
 		.ctl_name	= FS_LEASES,
 		.procname	= "leases-enable",
@@ -962,6 +963,7 @@ static ctl_table fs_table[] = {
 		.mode		= 0644,
 		.proc_handler	= &proc_dointvec,
 	},
+#endif
 #ifdef CONFIG_DNOTIFY
 	{
 		.ctl_name	= FS_DIR_NOTIFY,
@@ -973,6 +975,8 @@ static ctl_table fs_table[] = {
 	},
 #endif
 #ifdef CONFIG_MMU
+#ifdef CONFIG_FILE_LOCKING
+
 	{
 		.ctl_name	= FS_LEASE_TIME,
 		.procname	= "lease-break-time",
@@ -981,6 +985,7 @@ static ctl_table fs_table[] = {
 		.mode		= 0644,
 		.proc_handler	= &proc_dointvec,
 	},
+#endif
 #ifdef CONFIG_AIO
 	{
 		.ctl_name	= FS_AIO_NR,
