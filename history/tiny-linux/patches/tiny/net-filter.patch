
configurable old-style packet filtering support


 include/linux/filter.h |    6 	6 +	0 -	0 !
 include/net/sock.h     |   10 	9 +	1 -	0 !
 init/Kconfig           |    8 	8 +	0 -	0 !
 net/core/Makefile      |    3 	2 +	1 -	0 !
 net/core/sock.c        |    6 	4 +	2 -	0 !
 5 files changed, 29 insertions(+), 4 deletions(-)

Index: linux-2.6.23-rc9/include/linux/filter.h
===================================================================
--- linux-2.6.23-rc9.orig/include/linux/filter.h	2007-10-09 00:15:15.000000000 +0200
+++ linux-2.6.23-rc9/include/linux/filter.h	2007-10-09 00:15:25.000000000 +0200
@@ -141,12 +141,18 @@
 #define SKF_LL_OFF    (-0x200000)
 
 #ifdef __KERNEL__
+#ifdef CONFIG_NET_SK_FILTER
 struct sk_buff;
 struct sock;
 
 extern unsigned int sk_run_filter(struct sk_buff *skb, struct sock_filter *filter, int flen);
 extern int sk_attach_filter(struct sock_fprog *fprog, struct sock *sk);
 extern int sk_chk_filter(struct sock_filter *filter, int flen);
+#else
+#define sk_run_filter(a, b, c) (0)
+#define sk_attach_filter(a, b) (-EINVAL)
+#define sk_chk_filter(a, b) (-EINVAL)
+#endif /* NET_SK_FILTER */
 #endif /* __KERNEL__ */
 
 #endif /* __LINUX_FILTER_H__ */
Index: linux-2.6.23-rc9/include/net/sock.h
===================================================================
--- linux-2.6.23-rc9.orig/include/net/sock.h	2007-10-09 00:15:15.000000000 +0200
+++ linux-2.6.23-rc9/include/net/sock.h	2007-10-09 00:15:25.000000000 +0200
@@ -878,7 +878,7 @@
  * be accepted or -EPERM if the packet should be tossed.
  *
  */
-
+#ifdef CONFIG_NET_SK_FILTER
 static inline int sk_filter(struct sock *sk, struct sk_buff *skb)
 {
 	int err;
@@ -933,6 +933,14 @@
 	atomic_inc(&fp->refcnt);
 	atomic_add(sk_filter_len(fp), &sk->sk_omem_alloc);
 }
+#else
+
+#define sk_filter(a, b) (0)
+#define sk_filter_release(a, fp)
+#define sk_filter_charge(a, b)
+
+#endif
+
 
 /*
  * Socket reference counting postulates.
Index: linux-2.6.23-rc9/init/Kconfig
===================================================================
--- linux-2.6.23-rc9.orig/init/Kconfig	2007-10-09 00:15:15.000000000 +0200
+++ linux-2.6.23-rc9/init/Kconfig	2007-10-09 00:29:55.000000000 +0200
@@ -377,6 +377,14 @@
 	  This allows storing various information about network peers.
 	  Disabling saves about 2k.
 
+config NET_SK_FILTER
+        default y
+	depends NET
+	bool "Enable network socket filter" if EMBEDDED
+	help
+	  This enables the basic kernel level socket filtering, not to
+	  be confused with netfilter. Required by PPP.
+
 config MEASURE_INLINES
 	default n
 	bool "Enable inline measurement" if EMBEDDED
Index: linux-2.6.23-rc9/net/core/Makefile
===================================================================
--- linux-2.6.23-rc9.orig/net/core/Makefile	2007-10-09 00:15:15.000000000 +0200
+++ linux-2.6.23-rc9/net/core/Makefile	2007-10-09 00:29:55.000000000 +0200
@@ -8,7 +8,7 @@
 obj-$(CONFIG_SYSCTL) += sysctl_net_core.o
 
 obj-y		     += dev.o dev_mcast.o dst.o netevent.o \
-			neighbour.o rtnetlink.o utils.o link_watch.o filter.o
+			neighbour.o rtnetlink.o utils.o link_watch.o
 
 obj-$(CONFIG_XFRM) += flow.o
 obj-$(CONFIG_ETHTOOL) += ethtool.o
@@ -17,3 +17,4 @@
 obj-$(CONFIG_NETPOLL) += netpoll.o
 obj-$(CONFIG_NET_DMA) += user_dma.o
 obj-$(CONFIG_FIB_RULES) += fib_rules.o
+obj-$(CONFIG_NET_SK_FILTER) += filter.o
Index: linux-2.6.23-rc9/net/core/sock.c
===================================================================
--- linux-2.6.23-rc9.orig/net/core/sock.c	2007-10-09 00:15:15.000000000 +0200
+++ linux-2.6.23-rc9/net/core/sock.c	2007-10-09 00:15:25.000000000 +0200
@@ -426,7 +426,9 @@
 		    char __user *optval, int optlen)
 {
 	struct sock *sk=sock->sk;
+#ifdef CONFIG_NET_SK_FILTER
 	struct sk_filter *filter;
+#endif
 	int val;
 	int valbool;
 	struct linger ling;
@@ -636,6 +638,7 @@
 		ret = sock_set_timeout(&sk->sk_sndtimeo, optval, optlen);
 		break;
 
+#ifdef CONFIG_NET_SK_FILTER
 	case SO_ATTACH_FILTER:
 		ret = -EINVAL;
 		if (optlen == sizeof(struct sock_fprog)) {
@@ -668,7 +671,7 @@
 		else
 			clear_bit(SOCK_PASSSEC, &sock->flags);
 		break;
-
+#endif
 		/* We implement the SO_SNDLOWAT etc to
 		   not be settable (1003.1g 5.3) */
 	default:
