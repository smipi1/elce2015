
System for counting inline usage by generating deprecation warnings.


 include/linux/compiler-gcc.h  |   12 	9 +	3 -	0 !
 include/linux/compiler-gcc3.h |    2 	1 +	1 -	0 !
 include/linux/compiler-gcc4.h |    8 	4 +	4 -	0 !
 init/Kconfig                  |    9 	9 +	0 -	0 !
 scripts/count-inlines         |   88 	88 +	0 -	0 !
 5 files changed, 111 insertions(+), 8 deletions(-)

Index: linux-2.6.23-rc9/include/linux/compiler-gcc.h
===================================================================
--- linux-2.6.23-rc9.orig/include/linux/compiler-gcc.h	2007-07-09 01:32:17.000000000 +0200
+++ linux-2.6.23-rc9/include/linux/compiler-gcc.h	2007-10-08 23:52:27.000000000 +0200
@@ -26,9 +26,15 @@
 #define __must_be_array(a) \
   BUILD_BUG_ON_ZERO(__builtin_types_compatible_p(typeof(a), typeof(&a[0])))
 
-#define inline		inline		__attribute__((always_inline))
-#define __inline__	__inline__	__attribute__((always_inline))
-#define __inline	__inline	__attribute__((always_inline))
+#ifdef CONFIG_MEASURE_INLINES
+#define SHOWINLINE __attribute__((deprecated))
+#else
+#define SHOWINLINE
+#endif
+
+#define inline		inline		__attribute__((always_inline)) SHOWINLINE
+#define __inline__	__inline__	__attribute__((always_inline)) SHOWINLINE
+#define __inline	__inline	__attribute__((always_inline)) SHOWINLINE
 #define __deprecated			__attribute__((deprecated))
 #define __packed			__attribute__((packed))
 #define __weak				__attribute__((weak))
Index: linux-2.6.23-rc9/include/linux/compiler-gcc3.h
===================================================================
--- linux-2.6.23-rc9.orig/include/linux/compiler-gcc3.h	2007-07-09 01:32:17.000000000 +0200
+++ linux-2.6.23-rc9/include/linux/compiler-gcc3.h	2007-10-08 23:52:27.000000000 +0200
@@ -21,4 +21,4 @@
  */
 #define uninitialized_var(x) x = x
 
-#define __always_inline		inline __attribute__((always_inline))
+#define __always_inline		inline __attribute__((always_inline)) SHOWINLINE
Index: linux-2.6.23-rc9/init/Kconfig
===================================================================
--- linux-2.6.23-rc9.orig/init/Kconfig	2007-10-08 23:52:27.000000000 +0200
+++ linux-2.6.23-rc9/init/Kconfig	2007-10-09 00:30:27.000000000 +0200
@@ -334,6 +334,15 @@
 
 endif
 
+config MEASURE_INLINES
+	default n
+	bool "Enable inline measurement" if EMBEDDED
+	help
+          This marks inline functions deprecated, causing a kernel compile
+          to spew information about the location of each compilation.
+          With some post-processing, this can be used to generate counts
+          and footprints. Say N unless you want a very noisy build.
+
 config CC_OPTIMIZE_FOR_SIZE
 	bool "Optimize for size (Look out for broken compilers!)"
 	default y
Index: linux-2.6.23-rc9/scripts/count-inlines
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.23-rc9/scripts/count-inlines	2007-10-08 23:52:27.000000000 +0200
@@ -0,0 +1,88 @@
+#!/usr/bin/python
+
+# This reads the output of a kernel compile with
+# CONFIG_MEASURE_INLINES enabled and counts the number of code
+# instantiations. This is slightly tricky as gcc reports
+# instantiations of inlines inside of other inlines in header files,
+# so we need to build a call tree and credit only instantiations in C
+# files.
+#
+# Usage:
+#
+#  make 2> inline-data
+#  scripts/count-inlines inline-data | less
+#
+
+import sys, re
+
+showtree=1
+seen={}
+defined={}
+calls={}
+callers={}
+file={}
+uses={}
+usecount={}
+used=[]
+findcache={}
+bytesused={}
+total={}
+in_c={}
+
+inlines = open(sys.argv[1])
+
+# Credit nested inlines
+def credit(func, nest):
+    if nest>10: sys.exit(-1)
+    usecount[func] = usecount.get(func, 0) + 1
+    if not calls.has_key(func): return
+    for f in calls[func]: credit(f, nest+1)
+
+fr = re.compile(r"In function `(\S+)'")
+dr = re.compile(r"(\S+):(\d+): warning: `(\S+)' is deprecated \(declared at (\S+):(\d+)\)")
+current = "unknown"
+
+for l in inlines.xreadlines():
+    g = dr.match(l)
+    if not g:
+        try: current = fr.search(l).group(1)
+        except: pass
+        continue
+
+    use, useline, name, src, srcline = g.groups()
+    srcline, useline = int(srcline), int(useline)
+
+    total[name]= total.get(name, 0) + 1
+    if use[-1] == 'c': in_c[name] = in_c.get(name, 0) + 1
+
+    file.setdefault(src, []).append((name, srcline))
+    if src != use or (srcline != useline and srcline != useline-1):
+        uses.setdefault(name, []).append((use,useline))
+        if use[-1] == 'c': used.append(name)
+
+    if not name in calls.setdefault(current, []):
+        calls[current].append(name)
+    if not current in callers.setdefault(name, []):
+        callers[name].append(current)
+
+for func in used: credit(func, 0)
+
+l = [ (usecount[f], f) for f in usecount.keys() ]
+l.sort()
+l.reverse()
+
+for (c,f) in l:
+    def list(l):
+        a = [ (usecount.get(f),f) for f in l ]
+        a = filter(lambda x: x[0], a)
+        n = len(l) - len(a)
+        if n:
+            a.append((n,"<other>"))
+        a.sort()
+        a.reverse()
+        return " ".join(["%s(%d)" % (f,c) for c,f in a])
+    print "%d  %s (%d in *.c)" % (c, f, in_c.get(f, 0))
+    if showtree:
+        print "calls:", list(calls.get(f, []))
+        print "callers:", list(callers.get(f, []))
+        print
Index: linux-2.6.23-rc9/include/linux/compiler-gcc4.h
===================================================================
--- linux-2.6.23-rc9.orig/include/linux/compiler-gcc4.h	2007-10-08 23:51:25.000000000 +0200
+++ linux-2.6.23-rc9/include/linux/compiler-gcc4.h	2007-10-08 23:52:27.000000000 +0200
@@ -7,16 +7,16 @@
 # undef inline
 # undef __inline__
 # undef __inline
-# define inline			inline		__attribute__((always_inline))
-# define __inline__		__inline__	__attribute__((always_inline))
-# define __inline		__inline	__attribute__((always_inline))
+# define inline			inline		__attribute__((always_inline)) SHOWINLINE
+# define __inline__		__inline__	__attribute__((always_inline)) SHOWINLINE
+# define __inline		__inline	__attribute__((always_inline)) SHOWINLINE
 #endif
 
 #define __used			__attribute__((__used__))
 #define __attribute_used__	__used			/* deprecated */
 #define __must_check 		__attribute__((warn_unused_result))
 #define __compiler_offsetof(a,b) __builtin_offsetof(a,b)
-#define __always_inline		inline __attribute__((always_inline))
+#define __always_inline		inline __attribute__((always_inline)) SHOWINLINE
 
 /*
  * A trick to suppress uninitialized variable warning without generating any
