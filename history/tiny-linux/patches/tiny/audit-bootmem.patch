
Cause bootmem code to print callers and sizes for allocations


 init/Kconfig |    7 	7 +	0 -	0 !
 mm/bootmem.c |   13 	11 +	2 -	0 !
 2 files changed, 18 insertions(+), 2 deletions(-)

Index: linux-2.6.23-rc9/init/Kconfig
===================================================================
--- linux-2.6.23-rc9.orig/init/Kconfig	2007-10-08 23:52:27.000000000 +0200
+++ linux-2.6.23-rc9/init/Kconfig	2007-10-09 00:30:32.000000000 +0200
@@ -447,6 +447,13 @@
 	help
 	  Enable support for generating core dumps. Disabling saves about 4k.
 
+config AUDIT_BOOTMEM
+	default n
+	bool "Enabled auditing of bootmem allocations" if EMBEDDED
+	help
+	  This option causes the bootmem allocator to print caller and size
+          for each allocation.
+
 config BASE_FULL
 	default y
 	bool "Enable full-sized data structures for core" if EMBEDDED
Index: linux-2.6.23-rc9/mm/bootmem.c
===================================================================
--- linux-2.6.23-rc9.orig/mm/bootmem.c	2007-07-09 01:32:17.000000000 +0200
+++ linux-2.6.23-rc9/mm/bootmem.c	2007-10-08 23:52:27.000000000 +0200
@@ -12,7 +12,7 @@
 #include <linux/pfn.h>
 #include <linux/bootmem.h>
 #include <linux/module.h>
-
+#include <linux/kallsyms.h>
 #include <asm/bug.h>
 #include <asm/io.h>
 #include <asm/processor.h>
@@ -469,8 +469,17 @@
 	list_for_each_entry(bdata, &bdata_list, list) {
 		ptr = __alloc_bootmem_core(bdata, size, align, goal,
 						ARCH_LOW_ADDRESS_LIMIT);
-		if (ptr)
+		if (ptr){
+#ifdef CONFIG_AUDIT_BOOTMEM
+ 			printk("bootmem: %ld/%ld by %p", size, align,
+ 			       __builtin_return_address(0));
+ 			print_symbol(" (%s)",
+ 				     (int)__builtin_return_address(0));
+ 			printk("-> %p\n", ptr);
+#endif
+
 			return ptr;
+                }
 	}
 
 	/*
