
Configurable support for console charset translation


 drivers/char/consolemap.c |   71 	71 +	0 -	0 !
 drivers/char/vt.c         |    4 	4 +	0 -	0 !
 init/Kconfig              |    7 	7 +	0 -	0 !
 3 files changed, 82 insertions(+)

Index: linux-2.6.23-tiny/drivers/char/consolemap.c
===================================================================
--- linux-2.6.23-tiny.orig/drivers/char/consolemap.c	2007-10-12 21:37:57.000000000 +0200
+++ linux-2.6.23-tiny/drivers/char/consolemap.c	2007-10-12 23:15:06.000000000 +0200
@@ -22,6 +22,8 @@
 #include <linux/consolemap.h>
 #include <linux/vt_kern.h>
 
+#ifdef CONFIG_CONSOLE_TRANSLATIONS
+
 static unsigned short translations[][256] = {
   /* 8-bit Latin-1 mapped to Unicode -- trivial mapping */
   {
@@ -733,3 +735,79 @@
 }
 
 EXPORT_SYMBOL(con_copy_unimap);
+
+#else
+
+u16 inverse_translate(struct vc_data *conp, int glyph, int use_unicode)
+{
+	return glyph;
+}
+
+unsigned short *set_translate(int m, struct vc_data *vc)
+{
+	return NULL;
+}
+
+int con_set_trans_old(unsigned char * arg)
+{
+	return 0;
+}
+
+int con_get_trans_old(unsigned char * arg)
+{
+	return -EINVAL;
+}
+
+int con_set_trans_new(ushort * arg)
+{
+	return 0;
+}
+
+int con_get_trans_new(ushort * arg)
+{
+	return -EINVAL;
+}
+
+int con_clear_unimap(struct vc_data *vc, struct unimapinit *ui)
+{
+	return 0;
+}
+
+int con_set_unimap(struct vc_data *vc, ushort ct, struct unipair *list)
+{
+	return 0;
+}
+
+int con_set_default_unimap(struct vc_data *vc)
+{
+	return 0;
+}
+
+int con_copy_unimap(struct vc_data *d, struct vc_data *s)
+{
+	return 0;
+}
+
+int con_get_unimap(struct vc_data *vc, ushort ct, ushort *uct,
+		   struct unipair *list)
+{
+	return -EINVAL;
+}
+
+void con_free_unimap(struct vc_data *vc) { }
+
+int conv_uni_to_pc(struct vc_data *conp, long ucs)
+{
+	return ucs > 0xff ? -1: ucs;
+}
+
+u32 conv_8bit_to_uni(unsigned char c)
+{
+	/* CAUTION: LINUX-TINY - Not sure this is correct */
+	return c;
+}
+
+
+void __init console_map_init(void) { }
+
+#endif
Index: linux-2.6.23-tiny/drivers/char/vt.c
===================================================================
--- linux-2.6.23-tiny.orig/drivers/char/vt.c	2007-10-12 21:37:57.000000000 +0200
+++ linux-2.6.23-tiny/drivers/char/vt.c	2007-10-12 21:41:15.000000000 +0200
@@ -2154,7 +2154,11 @@
 			c = 0xfffd;
 		    tc = c;
 		} else {	/* no utf or alternate charset mode */
+#ifdef CONFIG_CONSOLE_TRANSLATIONS
 		    tc = vc->vc_translate[vc->vc_toggle_meta ? (c | 0x80) : c];
+#else
+		    tc = c;
+#endif
 		}
 
                 /* If the original code was a control character we
Index: linux-2.6.23-tiny/init/Kconfig
===================================================================
--- linux-2.6.23-tiny.orig/init/Kconfig	2007-10-12 21:41:15.000000000 +0200
+++ linux-2.6.23-tiny/init/Kconfig	2007-10-12 21:41:15.000000000 +0200
@@ -649,6 +649,13 @@
 	  will somewhat decrease code size, but with a higher risk of
 	  deadlock under some loads.
 
+config CONSOLE_TRANSLATIONS
+	default y
+	bool "Enable character translations in console" if EMBEDDED
+	help
+	  This enables support for font mapping and Unicode translation
+          on virtual consoles.
+
 endmenu		# General setup
 
 config RT_MUTEXES
